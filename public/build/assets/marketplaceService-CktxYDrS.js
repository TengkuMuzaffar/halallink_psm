import{z as c}from"./main-6TRAM3lj.js";import{m as s}from"./modal-CNQBRbiU.js";const p={cartUpdateListeners:[],cachedLocations:null,lastLocationsFetch:null,locationCacheTimeout:5*60*1e3,onCartUpdate(t){typeof t=="function"&&this.cartUpdateListeners.push(t)},notifyCartUpdate(t){this.cartUpdateListeners.forEach(e=>{try{e(t)}catch{}})},async fetchItems(t={}){try{return await c.get("/api/marketplace/items",{params:t})}catch(e){throw e}},async fetchPoultryTypes(){try{return(await c.get("/api/poultries")).data||[]}catch{return s.danger("Error","Failed to load poultry types. Please refresh the page."),[]}},async fetchUserLocations(){try{const t=Date.now();if(this.cachedLocations&&this.lastLocationsFetch&&t-this.lastLocationsFetch<this.locationCacheTimeout)return this.cachedLocations;const e=await c.get("/api/profile");return e&&e.locations?(this.cachedLocations=e.locations,this.lastLocationsFetch=t,this.cachedLocations):[]}catch{return s.danger("Error","Failed to load delivery locations. Please try again."),[]}},clearLocationsCache(){this.cachedLocations=null,this.lastLocationsFetch=null},async addToCart(t,e={}){try{const r=t.order_quantity||t.quantity||1,a=await c.post("/api/cart/add",{itemID:t.itemID||t.id,order_quantity:r});return s.success("Success","Item added to cart successfully"),this.notifyCartUpdate(a.data),a.data}catch(r){if(!e.suppressErrorModal){let a="Failed to add item to cart. Please try again later.";if(r.response&&r.response.data){const o=r.response.data;a=o.error||o.message||a}s.danger("Error",a)}return Promise.reject(r)}},async getCartItems(){try{const t=await c.get("/api/cart/items");if(t)if(t.data)if(t.data.success){const e={cart_items:t.data.cart_items||[],cart_count:t.data.cart_count||0,cart_total:t.data.cart_total||0};return this.notifyCartUpdate(e),e}else return{cart_items:[],cart_count:0,cart_total:0};else return t.success?{cart_items:t.cart_items||[],cart_count:t.cart_count||0,cart_total:t.cart_total||0}:Array.isArray(t)?{cart_items:t,cart_count:t.length,cart_total:0}:(console.warn("Cart API response has unexpected format:",t),{cart_items:[],cart_count:0,cart_total:0});else return{cart_items:[],cart_count:0,cart_total:0}}catch{return{cart_items:[],cart_count:0,cart_total:0}}},async updateCartItem(t,e,r={}){try{const a=await c.put("/api/cart/update",{cartID:t,quantity:e});return a&&a.data&&this.notifyCartUpdate(a.data),a.data}catch(a){if(!r.suppressErrorModal){let o="Failed to update cart item. Please try again.";if(a.response&&a.response.data){const n=a.response.data;o=n.error||n.message||o}s.danger("Error",o)}return Promise.reject(a)}},async removeCartItem(t,e={}){try{const r=await c.delete(`/api/cart/remove/${t}`);if(r&&r.data)this.notifyCartUpdate(r.data);else try{const a=await this.getCartItems()}catch{}return r.data}catch(r){if(!e.suppressErrorModal){let a="Failed to remove item from cart. Please try again.";if(r.response&&r.response.data){const o=r.response.data;a=o.error||o.message||a}s.danger("Error",a)}return Promise.reject(r)}},async viewCart(){var t;try{const e=(t=document.getElementById("cart-modal-component"))==null?void 0:t.__vue__;if(e){e.showViewCartModal();return}window.location.href="/cart"}catch(e){throw s.danger("Error","Failed to load cart items. Please try again."),e}},updateCartBadge(t){let e=document.querySelector(".cart-badge");if(!e&&t>0){const r=document.querySelector(".cart-button");r&&(e=document.createElement("span"),e.className="cart-badge",r.appendChild(e))}e&&(t>0?(e.textContent=t>99?"99+":t,e.style.display="flex"):e.style.display="none")},animateCartButton(){const t=document.querySelector(".cart-button");t&&(t.classList.remove("cart-shake"),t.offsetWidth,t.classList.add("cart-shake"))},async checkout(t){try{if(!t)throw new Error("Please select a delivery location");const e=await c.post("/api/payment/create",{locationID:t});if(e&&e.redirect_url)window.location.href=e.redirect_url;else throw new Error("Invalid payment response format")}catch(e){let r="Unable to process payment. Please try again.";throw e.response&&(e.response.status===526?r="Failed to connect to payment gateway: 526":e.response.data&&e.response.data.message&&(r=e.response.data.message)),new Error(r)}},async verifyPayment(t={}){try{const{billcode:e,order_id:r,status_id:a,transaction_id:o}=t;if(!e||!r)return s.close(),s.danger("Verification Error","Missing required payment information"),Promise.reject(new Error("Missing required payment parameters"));const n=await c.get("/api/payment/verify",{params:{billcode:e,order_id:r,transaction_id:o}});if(n&&n.data)if(n.data.success){s.success("Payment Successful",`Your payment of ${n.data.amount} has been processed successfully.`);try{await this.getCartItems()}catch{}return n.data}else return s.warning("Payment Verification",n.data.message||"Payment verification failed. Please contact support."),Promise.reject(new Error(n.data.message||"Payment verification failed"));else return s.danger("Verification Error","Unable to verify payment. Please contact support."),Promise.reject(new Error("Invalid response from payment verification"))}catch(e){return e.response&&e.response.data&&e.response.data.message?s.danger("Verification Error",e.response.data.message):s.danger("Verification Error","An error occurred while verifying your payment. Please contact support."),Promise.reject(e)}},async handlePaymentStatus(t){try{const e=t.status_id,r=t.billcode,a=t.order_id,o=t.msg,n=t.transaction_id;if(e==="1"&&o==="ok")return await this.verifyPayment({billcode:r,order_id:a,status_id:e,transaction_id:n});{const i=e==="2"?"Payment is pending.":"Payment was not successful.";return s.warning("Payment Status",i),Promise.reject(new Error(i))}}catch(e){return s.danger("Payment Error","An error occurred while processing your payment status."),Promise.reject(e)}}};export{p as m};
