import{l as c}from"./main-6HkEK7r2.js";import{m as o}from"./modal-BXblql9Y.js";const p={cartUpdateListeners:[],cachedLocations:null,lastLocationsFetch:null,locationCacheTimeout:5*60*1e3,onCartUpdate(e){typeof e=="function"&&this.cartUpdateListeners.push(e)},notifyCartUpdate(e){this.cartUpdateListeners.forEach(r=>{try{r(e)}catch(t){console.error("Error in cart update callback:",t)}})},async fetchItems(e={}){try{return await c.get("/api/marketplace/items",{params:e})}catch(r){throw console.error("Error fetching marketplace items:",r),r}},async fetchPoultryTypes(){try{return(await c.get("/api/poultries")).data||[]}catch(e){return console.error("Error fetching poultry types:",e),o.danger("Error","Failed to load poultry types. Please refresh the page."),[]}},async fetchUserLocations(){try{const e=Date.now();if(this.cachedLocations&&this.lastLocationsFetch&&e-this.lastLocationsFetch<this.locationCacheTimeout)return console.log("Using cached locations"),this.cachedLocations;const r=await c.get("/api/profile");return r&&r.locations?(this.cachedLocations=r.locations,this.lastLocationsFetch=e,this.cachedLocations):[]}catch(e){return console.error("Error fetching user locations:",e),o.danger("Error","Failed to load delivery locations. Please try again."),[]}},clearLocationsCache(){this.cachedLocations=null,this.lastLocationsFetch=null},async addToCart(e,r={}){try{console.log("Adding to cart:",e);const t=e.order_quantity||e.quantity||1,a=await c.post("/api/cart/add",{itemID:e.itemID||e.id,order_quantity:t});return o.success("Success","Item added to cart successfully"),this.notifyCartUpdate(a.data),a.data}catch(t){if(console.error("Error adding to cart:",t),!r.suppressErrorModal){let a="Failed to add item to cart. Please try again later.";if(t.response&&t.response.data){const s=t.response.data;a=s.error||s.message||a}o.danger("Error",a)}return Promise.reject(t)}},async getCartItems(){try{const e=await c.get("/api/cart/items");if(e)if(e.data)if(console.log("Cart items response.data:",e.data),e.data.success){const r={cart_items:e.data.cart_items||[],cart_count:e.data.cart_count||0,cart_total:e.data.cart_total||0};return this.notifyCartUpdate(r),r}else return console.warn("Cart API response indicates failure:",e.data.message),{cart_items:[],cart_count:0,cart_total:0};else return e.success?{cart_items:e.cart_items||[],cart_count:e.cart_count||0,cart_total:e.cart_total||0}:Array.isArray(e)?{cart_items:e,cart_count:e.length,cart_total:0}:{cart_items:[],cart_count:0,cart_total:0};else return console.warn("Cart API response is null or undefined"),{cart_items:[],cart_count:0,cart_total:0}}catch(e){return console.error("Error fetching cart items:",e),{cart_items:[],cart_count:0,cart_total:0}}},async updateCartItem(e,r,t={}){try{const a=await c.put("/api/cart/update",{cartID:e,quantity:r});return a&&a.data&&this.notifyCartUpdate(a.data),a.data}catch(a){if(console.error("Error updating cart item:",a),!t.suppressErrorModal){let s="Failed to update cart item. Please try again.";if(a.response&&a.response.data){const n=a.response.data;s=n.error||n.message||s}o.danger("Error",s)}return Promise.reject(a)}},async removeCartItem(e,r={}){try{const t=await c.delete(`/api/cart/remove/${e}`);if(t&&t.data)this.notifyCartUpdate(t.data);else try{const a=await this.getCartItems()}catch(a){console.warn("Error refreshing cart count after removal:",a)}return t.data}catch(t){if(console.error("Error removing cart item:",t),!r.suppressErrorModal){let a="Failed to remove item from cart. Please try again.";if(t.response&&t.response.data){const s=t.response.data;a=s.error||s.message||a}o.danger("Error",a)}return Promise.reject(t)}},async viewCart(){var e;try{const r=(e=document.getElementById("cart-modal-component"))==null?void 0:e.__vue__;if(r){r.showViewCartModal();return}window.location.href="/cart"}catch(r){throw console.error("Error viewing cart:",r),o.danger("Error","Failed to load cart items. Please try again."),r}},updateCartBadge(e){let r=document.querySelector(".cart-badge");if(!r&&e>0){const t=document.querySelector(".cart-button");t&&(r=document.createElement("span"),r.className="cart-badge",t.appendChild(r))}r&&(e>0?(r.textContent=e>99?"99+":e,r.style.display="flex"):r.style.display="none")},animateCartButton(){const e=document.querySelector(".cart-button");e&&(e.classList.remove("cart-shake"),e.offsetWidth,e.classList.add("cart-shake"))},async checkout(e){try{if(!e)throw new Error("Please select a delivery location");console.log("Processing checkout with locationID:",e),o.loading("Processing Payment","Please wait while we connect to the payment gateway...");const r=await c.post("/api/payment/create",{locationID:e});if(o.close(),console.log("Payment API response:",r),r&&r.redirect_url)console.log("Response data:",r.redirect_url),window.location.href=r.redirect_url;else throw console.error("Invalid response format:",r),o.danger("Checkout Error","Unable to process payment. Please try again."),new Error("Invalid payment response format")}catch(r){o.close(),console.error("Error processing checkout:",r);let t="Unable to process payment. Please try again.";throw r.response&&r.response.data&&(console.error("Error response:",r.response.data),r.response.data&&r.response.data.message&&(t=r.response.data.message)),o.danger("Checkout Error",t),r}},async verifyPayment(e={}){try{const{billcode:r,order_id:t,status_id:a,transaction_id:s}=e;if(console.log("Verifying payment with params:",e),!r||!t)return o.close(),o.danger("Verification Error","Missing required payment information"),Promise.reject(new Error("Missing required payment parameters"));const n=await c.get("/api/payment/verify",{params:{billcode:r,order_id:t,transaction_id:s}});if(n&&n.data)if(n.data.success){o.success("Payment Successful",`Your payment of ${n.data.amount} has been processed successfully.`);try{await this.getCartItems()}catch(i){console.warn("Error refreshing cart after payment:",i)}return n.data}else return o.warning("Payment Verification",n.data.message||"Payment verification failed. Please contact support."),Promise.reject(new Error(n.data.message||"Payment verification failed"));else return console.error("Invalid payment verification response:",n),o.danger("Verification Error","Unable to verify payment. Please contact support."),Promise.reject(new Error("Invalid response from payment verification"))}catch(r){return console.error("Error verifying payment:",r),r.response&&r.response.data&&r.response.data.message?o.danger("Verification Error",r.response.data.message):o.danger("Verification Error","An error occurred while verifying your payment. Please contact support."),Promise.reject(r)}},async handlePaymentStatus(e){try{const r=e.status_id,t=e.billcode,a=e.order_id,s=e.msg,n=e.transaction_id;if(console.log("Payment status callback received:",{statusId:r,billCode:t,orderId:a,message:s,transactionId:n}),r==="1"&&s==="ok")return await this.verifyPayment({billcode:t,order_id:a,status_id:r,transaction_id:n});{const i=r==="2"?"Payment is pending.":"Payment was not successful.";return o.warning("Payment Status",i),Promise.reject(new Error(i))}}catch(r){return console.error("Error handling payment status:",r),o.danger("Payment Error","An error occurred while processing your payment status."),Promise.reject(r)}}};export{p as m};
